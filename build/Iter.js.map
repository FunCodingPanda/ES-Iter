{"version":3,"sources":["../src/Iter.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,SAAT,CAAoB,CAApB,EAAuB;AACnB,QAAI,IAAI,CAAR,EAAW;AACP,eAAO,KAAK,IAAL,CAAU,CAAV,CAAP;AACH;AACD,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACH;;AAED,SAAS,iBAAT,CAA4B,CAA5B,EAA+B;AAC3B,QAAI,IAAI,CAAR,EAAW;AACP,eAAO,CAAP;AACH;AACD,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACH;;IAEoB,I;AACjB,kBAAa,QAAb,EAAuB;AAAA;;AACnB,YAAI,WAAW,KAAK,WAAL,CAAiB,OAAO,QAAP,KAAoB,UAApB,GAAiC,UAAjC,GAA8C,QAA/D,CAAf;;AAEA,aAAK,OAAO,QAAZ,IAAwB;AAAA,mBAAM,QAAN;AAAA,SAAxB;AACH;;;;oCAqNqB;AAAA,gBAAX,KAAW,yDAAH,CAAG;;AAClB,mBAAO,KAAK,GAAL,CAAS,KAAK,KAAL,CAAW,KAAX,CAAT,EAA4B,IAA5B,CAAP;AACH;;;qCAEuC;AAAA,gBAA5B,QAA4B,yDAAjB,UAAC,CAAD,EAAI,CAAJ;AAAA,uBAAU,IAAI,CAAd;AAAA,aAAiB;;AACpC,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ,oCAFI,GAEG,SAAS,IAAT,EAFH,EAGJ,GAHI,GAGE,KAAK,KAHP;;AAAA,oCAIH,KAAK,IAJF;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAKE,GALF;;AAAA;AAAA,oCAOA,CAAE,OAAO,SAAS,IAAT,EAAT,EAA2B,IAP3B;AAAA;AAAA;AAAA;;AAQJ,sCAAM,SAAS,GAAT,EAAc,KAAK,KAAnB,CAAN;AARI;AAAA,uCASE,GATF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAYR,qCAAK,aAAL,CAAmB,QAAnB;AAZQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAeH;;;gCAEoB;AAAA,8CAAX,SAAW;AAAX,yBAAW;AAAA;;AACjB,gBAAI,YAAY,CAAC,IAAD,SAAU,SAAV,EAAqB,GAArB,CAAyB,KAAK,WAA9B,CAAhB;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACG,SADH;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,kCADG;AAAA,+DAED,EAFC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;iCAES,S,EAAW;AACjB,gBAAI,WAAW,KAAK,GAAL,CAAS,IAAT,EAAe,SAAf,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACO,QADP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACF,iCADE;AACC,iCADD;;AAAA,qCAEJ,CAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEK,CAFL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;kCAEwB;AAAA,gBAAhB,GAAgB,yDAAV,UAAC,CAAD;AAAA,uBAAO,CAAP;AAAA,aAAU;;AACrB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR,iCADQ,GACJ,EADI;AAER,mCAFQ,GAEF,EAFE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIE,QAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIH,iCAJG;AAKJ,mCALI,GAKE,IAAI,CAAJ,CALF;;AAAA,sCAMJ,QAAQ,CANJ;AAAA;AAAA;AAAA;;AAAA,qCAOA,IAAI,MAPJ;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAQM,CAAC,CAAD,EAAI,GAAJ,CARN;;AAAA;AAUJ,sCAAM,EAAN;AACA,oCAAI,GAAJ;;AAXI;AAaR,oCAAI,IAAJ,CAAS,CAAT;;AAbQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,qCAeR,IAAI,MAfI;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAgBF,CAAC,CAAD,EAAI,GAAJ,CAhBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAmBH;;;8BAEyB;AAAA,gBAArB,QAAqB,yDAAV,UAAC,CAAD;AAAA,uBAAO,CAAP;AAAA,aAAU;;AACtB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;AAAA;AAAA,uCAEF,SAAS,CAAT,CAFE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;kCAEyC;AAAA,gBAAlC,QAAkC,yDAAvB,UAAC,CAAD;AAAA,uBAAO,CAAP;AAAA,aAAuB;AAAA,gBAAb,IAAa,yDAAN,IAAM;;AACtC,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;AACA,gBAAI,OAAQ,IAAI,GAAJ,EAAZ;;AAEA,mBAAO,IAAI,IAAJ,yBAAS,SAAU,OAAV;AAAA,oBAAkB,QAAlB,yDAA6B,QAA7B;AAAA,oBAAuC,KAAvC,yDAA+C,CAA/C;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACR,KAAK,GAAL,CAAS,QAAT,CADQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAKZ,qCAAK,GAAL,CAAS,QAAT;AALY;AAAA;AAAA;AAAA;AAAA,6CAME,QANF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMH,iCANG;;AAAA,sCAOJ,KAAK,UAAL,CAAgB,CAAhB,MAAuB,QAAQ,QAAQ,CAAvC,CAPI;AAAA;AAAA;AAAA;;AAAA,+DAQG,QAAQ,CAAR,EAAW,QAAQ,CAAnB,CARH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAWE,SAAS,CAAT,CAXF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAcZ,qCAAK,MAAL,CAAY,QAAZ;;AAdY;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,OAAV;AAAA,aAAT,EAAP;AAgBH;;;kCAEU,Q,EAAU;AACjB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACI,QADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,mCADG;AAAA;AAAA,uCAEF,6CAAY,GAAZ,EAFE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;+BAEmB;AAAA,gBAAd,CAAc,yDAAV,QAAU;;AAChB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR,qCADQ,GACA,kBAAkB,CAAlB,CADA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEE,QAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEH,iCAFG;;AAAA,sCAGJ,UAAU,CAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAIE,CAJF;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAUH;;;oCAE8B;AAAA,gBAApB,QAAoB,yDAAT,OAAS;;AAC3B,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;;AAAA,qCAEJ,SAAS,CAAT,CAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,CAHF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAUH;;;+BAEmB;AAAA,gBAAd,CAAc,yDAAV,QAAU;;AAChB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR,qCADQ,GACA,kBAAkB,CAAlB,CADA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEE,QAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEH,iCAFG;;AAAA,sCAGJ,UAAU,CAHN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uCAMF,CANE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AASH;;;oCAE8B;AAAA,gBAApB,QAAoB,yDAAT,OAAS;;AAC3B,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;;AAAA,oCAEH,SAAS,CAAT,CAFG;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,CAHF;;AAAA;AAAA,gEAIG,QAJH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AASH;;;iCAE2B;AAAA,gBAApB,QAAoB,yDAAT,OAAS;;AACxB,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;;AAAA,qCAEJ,SAAS,CAAT,CAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,CAHF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAOH;;;sCAEgC;AAAA,gBAApB,QAAoB,yDAAT,OAAS;;AAC7B,gBAAI,WAAW,KAAK,WAAL,CAAiB,IAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;;AAAA,oCAEH,SAAS,CAAT,CAFG;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,CAHF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAOH;;;kCAE8B;AAAA,gBAAtB,CAAsB,yDAAlB,EAAkB;;AAAA,+CAAX,SAAW;AAAX,yBAAW;AAAA;;AAC3B,gBAAI,MAAM,CAAC,IAAD,EAAO,CAAP,SAAa,SAAb,EAAwB,GAAxB,CAA4B,UAAC,EAAD;AAAA,uBAAQ,KAAK,eAAL,CAAqB,EAArB,IAA2B,EAA3B,gCAAoC,EAApC,EAAR;AAAA,aAA5B,CAAV;AAAA,gBACI,MAAM,IAAI,MADd;AAAA,gBAEI,MAAM,EAFV;;AAIA,mBAAO,IAAI,IAAJ,yBAAS,SAAU,GAAV;AAAA,oBAAc,GAAd,yDAAoB,CAApB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCACR,OAAO,GADC;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEF,IAAI,KAAJ,EAFE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAKE,IAAI,GAAJ,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKH,iCALG;;AAMR,oCAAI,GAAJ,IAAW,CAAX;AANQ,gEAOD,IAAI,MAAM,CAAV,CAPC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,GAAV;AAAA,aAAT,EAAP;AAUH;;;uCAE2B;AAAA,gBAAd,CAAc,yDAAV,QAAU;;AACxB,gBAAI,MAAM,KAAK,OAAL,EAAV;AAAA,gBACI,MAAM,IAAI,GAAJ,EADV;AAAA,gBAEI,MAAM,EAFV;AAAA,gBAGI,MAAO,KAAK,GAAL,CAAS,kBAAkB,CAAlB,CAAT,EAA+B,IAAI,MAAnC,CAHX;;AAKA,mBAAO,IAAI,IAAJ,yBAAS,SAAU,GAAV;AAAA,oBAAc,GAAd,yDAAoB,CAApB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCACR,OAAO,GADC;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEF,IAAI,KAAJ,EAFE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAKO,IAAI,IAAJ,CAAS,GAAT,EAAc,SAAd,EALP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAKF,iCALE;AAKC,iCALD;;AAAA,oCAMH,IAAI,GAAJ,CAAQ,CAAR,CANG;AAAA;AAAA;AAAA;;AAOJ,oCAAI,GAAJ,CAAQ,CAAR,EAAW,IAAX;AACA,oCAAI,GAAJ,IAAW,CAAX;AARI,gEASG,IAAI,MAAM,CAAV,CATH;;AAAA;AAUJ,oCAAI,MAAJ,CAAW,CAAX;;AAVI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,GAAV;AAAA,aAAT,EAAP;AAcH;;;qCAEa,C,EAAG;AACb,gBAAI,MAAM,KAAK,OAAL,EAAV;AAAA,gBACI,MAAM,kBAAkB,CAAlB,CADV;AAAA,gBAEI,MAAM,EAFV;;AAIA,mBAAO,IAAI,IAAJ,yBAAS,SAAU,GAAV;AAAA,oBAAc,GAAd,yDAAoB,CAApB;AAAA,oBAAuB,KAAvB,yDAA+B,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACR,OAAO,GADC;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEF,IAAI,KAAJ,EAFE;;AAAA;AAAA;;AAAA;AAKH,iCALG,GAKC,KALD,EAKQ,CALR,GAKY,IAAI,MALhB;;AAAA;AAAA,sCAKwB,IAAI,CAL5B;AAAA;AAAA;AAAA;;AAMR,oCAAI,GAAJ,IAAW,IAAI,CAAJ,CAAX;AANQ,gEAOD,IAAI,MAAM,CAAV,EAAa,IAAI,CAAjB,CAPC;;AAAA;AAK+B,mCAL/B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,GAAV;AAAA,aAAT,EAAP;AAUH;;;qCAEa;AACV,mBAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP;AACH;;;kCAEU;AACP,gDAAW,KAAK,WAAL,CAAiB,IAAjB,CAAX;AACH;;;oCAjdmB,G,EAAK;AACrB,mBAAO,IAAI,OAAO,QAAX,GAAP;AACH;;;mCAEkB,G,EAAK;AACpB,mBAAQ,KAAK,UAAL,CAAgB,GAAhB,KAAwB,OAAO,IAAI,IAAX,KAAoB,UAApD;AACH;;;qCAE8B;AAAA,gBAAZ,GAAY,yDAAN,IAAM;;AAC3B,mBAAQ,QAAQ,IAAR,IAAgB,OAAO,IAAI,OAAO,QAAX,CAAP,KAAgC,UAAxD;AACH;;;wCAEuB,G,EAAK;AACzB,mBAAQ,KAAK,UAAL,CAAgB,GAAhB,KAAwB,KAAK,WAAL,CAAiB,GAAjB,MAA0B,KAAK,WAAL,CAAiB,GAAjB,CAA1D;AACH;;;mCAEkB,Q,EAAU;AACzB,mBAAQ,KAAK,UAAL,CAAgB,QAAhB,KAA6B,OAAO,SAAS,MAAhB,KAA2B,UAAhE;AACH;;;sCAEqB,Q,EAAU;AAC5B,gBAAI,KAAK,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAC3B,uBAAO,QAAQ,SAAS,MAAT,GAAkB,IAA1B,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;6BAEY,G,EAAK;AACd,gBAAI,OAAO,IAAI,IAAX,KAAoB,UAAxB,EAAoC;AAChC,uBAAO,IAAI,IAAJ,CAAS,IAAI,IAAJ,EAAT,CAAP;AACH;;AAED,gBAAI,WAAW,QAAQ,SAAR,CAAkB,GAAlB,CAAf;AACA,gBAAI,UAAU,GAAG,cAAjB;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,QADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;;AAAA,qCAEJ,QAAQ,IAAR,CAAa,GAAb,EAAkB,CAAlB,CAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,CAHF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAOH;;;gCAEe,G,EAAK;AACjB,gBAAI,OAAO,IAAI,OAAX,KAAuB,UAA3B,EAAuC;AACnC,uBAAO,IAAI,IAAJ,CAAS,IAAI,OAAJ,EAAT,CAAP;AACH;AACD,gBAAI,OAAO,KAAK,IAAL,CAAU,GAAV,CAAX;AACA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,IADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;AAAA;AAAA,uCAEF,CAAC,CAAD,EAAI,IAAI,CAAJ,CAAJ,CAFE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;+BAEc,G,EAAK;AAChB,gBAAI,OAAO,IAAI,MAAX,KAAsB,UAA1B,EAAsC;AAClC,uBAAO,IAAI,IAAJ,CAAS,IAAI,MAAJ,EAAT,CAAP;AACH;AACD,gBAAI,OAAO,KAAK,IAAL,CAAU,GAAV,CAAX;AACA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,IADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;AAAA;AAAA,uCAEF,IAAI,CAAJ,CAFE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;gCAEe,S,EAAW;AACvB,gBAAI,MAAM,kBAAkB,UAAU,MAA5B,CAAV;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iCADG,GACC,GADD;;AAAA;AAAA,qCACM,GADN;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEF,UAAU,CAAV,CAFE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;gCAEuC;AAAA,gBAA1B,KAA0B,yDAAlB,CAAkB;AAAA,gBAAf,GAAe;AAAA,gBAAV,IAAU,yDAAH,CAAG;;AACpC,gBAAI,OAAO,GAAP,KAAe,WAAnB,EAAgC;AAC5B,sBAAM,KAAN;AACA,wBAAQ,CAAR;AACH;;AAED,oBAAQ,UAAU,KAAV,CAAR;AACA,kBAAQ,UAAU,GAAV,CAAR;AACA,mBAAQ,UAAU,IAAV,CAAR;;AAEA,gBAAI,SAAU,UAAU,KAAV,IAAmB,OAApB,IAAiC,QAAQ,GAAR,IAAe,KAAhD,IAA2D,SAAS,IAAT,IAAiB,MAAzF;AACA,gBAAI,MAAJ,EAAY;AACR,sBAAM,UAAU,wBAAwB,MAAxB,GAAiC,WAA3C,CAAN;AACH;AACD,gBAAI,QAAQ,CAAZ,EAAe;AACX,sBAAM,WAAW,qBAAX,CAAN;AACH;;AAED,mBAAO,IAAI,IAAJ,yBAAS;AAAA;AAAA;AAAA;AAAA;AAAA,sCACR,OAAO,CADC;AAAA;AAAA;AAAA;;AAAA;AAAA,sCAED,QAAQ,GAFP;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAGE,KAHF;;AAAA;AAIJ,yCAAS,IAAT;AAJI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,sCAOH,OAAO,CAPJ;AAAA;AAAA;AAAA;;AAAA;AAAA,sCAQD,QAAQ,GARP;AAAA;AAAA;AAAA;;AAAA;AAAA,uCASE,KATF;;AAAA;AAUJ,yCAAS,IAAT;AAVI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAcH;;;qCAE4C;AAAA,gBAA1B,KAA0B,yDAAlB,CAAkB;AAAA,gBAAf,GAAe;AAAA,gBAAV,IAAU,yDAAH,CAAG;;AACzC,gBAAI,OAAO,GAAP,KAAe,WAAnB,EAAgC;AAC5B,sBAAM,KAAN;AACA,wBAAQ,CAAR;AACH;;AAED,gBAAI,IAAI,KAAK,GAAL,CAAS,CAAC,QAAQ,GAAT,IAAgB,IAAhB,IAAwB,IAAjC,CAAR;AACA,gBAAI,QAAQ,GAAZ,EAAiB;AACb,uBAAO,CAAP;AACA;AACH,aAHD,MAIK;AACD,uBAAO,CAAP;AACA;AACH;;AAED,mBAAO,KAAK,KAAL,CAAW,GAAX,EAAgB,KAAhB,EAAuB,CAAC,IAAxB,CAAP;AACH;;;4BAEW,Q,EAAwB;AAAA,+CAAX,SAAW;AAAX,yBAAW;AAAA;;AAChC,gBAAI,YAAY,CAAC,QAAD,SAAc,SAAd,EAAyB,GAAzB,CAA6B,KAAK,WAAlC,CAAhB;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qCAED,IAFC;AAAA;AAAA;AAAA;;AAGA,mCAHA,GAGM,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA,8CAIW,SAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIK,kCAJL;AAKI,oCALJ,GAKW,GAAG,IAAH,EALX;;AAAA,qCAMI,KAAK,IANT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAOI,mDAAc,SAAd,+HAAyB;AAAhB,qCAAgB;;AACrB,wCAAI,MAAM,EAAV,EAAc,KAAK,aAAL,CAAmB,CAAnB;AACjB;AATL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAYA,oCAAI,IAAJ,CAAS,KAAK,KAAd;;AAZA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAcE,GAdF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAiBR,0CAAU,GAAV,CAAc,KAAK,aAAnB;AAjBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAoBH;;;gCAEe,Q,EAAwB;AAAA,+CAAX,SAAW;AAAX,yBAAW;AAAA;;AACpC,gBAAI,YAAY,CAAC,QAAD,SAAc,SAAd,EAAyB,GAAzB,CAA6B,KAAK,WAAlC,CAAhB;AAAA,gBACI,MAAY,IAAI,GAAJ,CAAQ,KAAK,GAAL,CAAS,SAAT,EAAoB,KAAK,MAAL,CAAY,KAAZ,CAApB,CAAR,CADhB;AAAA,gBAEI,QAAY,CAFhB;;AAIA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qCAED,IAFC;AAAA;AAAA;AAAA;;AAGA,mCAHA,GAGM,EAHN;AAAA;AAAA;AAAA;AAAA;;AAIJ,mDAAe,SAAf,+HAA0B;AAAjB,sCAAiB;AAClB,wCADkB,GACX,GAAG,IAAH,EADW;;AAEtB,wCAAI,KAAK,IAAL,IAAa,CAAC,IAAI,GAAJ,CAAQ,EAAR,CAAlB,EAA+B;AAC3B,4CAAI,GAAJ,CAAQ,EAAR,EAAY,IAAZ;AACA;AACH;AACD,wCAAI,IAAJ,CAAS,KAAK,KAAd;AACH;AAXG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,sCAYA,SAAS,UAAU,MAZnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uCAeE,GAfF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkBR,0CAAU,GAAV,CAAc,KAAK,aAAnB;AAlBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAqBH;;;8BAEa,K,EAAiB;AAAA,gBAAV,IAAU,yDAAH,CAAG;;AAC3B,mBAAO,KAAK,KAAL,CAAW,KAAX,EAAkB,OAAO,QAAzB,EAAmC,IAAnC,CAAP;AACH;;;8BAEa,Q,EAAU;AACpB,gBAAI,WAAW,KAAK,WAAL,CAAiB,QAAjB,CAAf;;AAEA,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR,mCADQ,GACF,EADE;AAAA;AAAA;AAAA;AAAA;AAAA,8CAEE,QAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEH,iCAFG;AAAA;AAAA,uCAGF,CAHE;;AAAA;AAIR,oCAAI,IAAJ,CAAS,CAAT;;AAJQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,qCAML,IANK;AAAA;AAAA;AAAA;;AAAA,gEAOD,GAPC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAUH;;;+BAEc,G,EAAuB;AAAA,gBAAlB,KAAkB,yDAAV,QAAU;;AAClC,mBAAO,IAAI,IAAJ,yBAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,KAAK,KAAL,CAAW,kBAAkB,KAAlB,CAAX,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACH,iCADG;AAAA;AAAA,uCAEF,GAFE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT,EAAP;AAKH;;;;;;kBAxNgB,I","file":"Iter.js","sourcesContent":["function toInteger (n) {\n    if (n < 0) {\n        return Math.ceil(n);\n    }\n    return Math.floor(n);\n}\n\nfunction toPositiveInteger (n) {\n    if (n < 0) {\n        return 0;\n    }\n    return Math.floor(n);\n}\n\nexport default class Iter {\n    constructor (iterable) {\n        let iterator = Iter.getIterator(typeof iterable === 'function' ? iterable() : iterable);\n        \n        this[Symbol.iterator] = () => iterator;\n    }\n    \n    static getIterator (obj) {\n        return obj[Symbol.iterator]();\n    }\n\n    static isIterator (obj) {\n        return (Iter.isIterable(obj) && typeof obj.next === 'function');\n    }\n\n    static isIterable (obj = null) {\n        return (obj !== null && typeof obj[Symbol.iterator] === 'function');\n    }\n\n    static isMultiIterable (obj) {\n        return (Iter.isIterable(obj) && Iter.getIterator(obj) !== Iter.getIterator(obj));\n    }\n\n    static isClosable (iterator) {\n        return (Iter.isIterator(iterator) && typeof iterator.return === 'function');\n    }\n\n    static closeIterator (iterator) {\n        if (Iter.isClosable(iterator)) {\n            return Boolean(iterator.return().done);\n        }\n        return false;\n    }\n    \n    static keys (obj) {\n        if (typeof obj.keys === 'function') {\n            return new Iter(obj.keys());\n        }\n        \n        let iterator = Reflect.enumerate(obj);\n        let hasOwnP = {}.hasOwnProperty;\n        \n        return new Iter(function* () {\n            for (let k of iterator) {\n                if (hasOwnP.call(obj, k)) {\n                    yield k;\n                }\n            }\n        });\n    }\n    \n    static entries (obj) {\n        if (typeof obj.entries === 'function') {\n            return new Iter(obj.entries());\n        }\n        let keys = Iter.keys(obj);\n        return new Iter(function* () {\n            for (let k of keys) {\n                yield [k, obj[k]];\n            }\n        });        \n    }\n    \n    static values (obj) {\n        if (typeof obj.values === 'function') {\n            return new Iter(obj.values());\n        }\n        let keys = Iter.keys(obj);\n        return new Iter(function* () {\n            for (let k of keys) {\n                yield obj[k];\n            }\n        });            \n    }\n    \n    static reverse (arrayLike) {\n        let len = toPositiveInteger(arrayLike.length);\n                \n        return new Iter(function* () {\n            for (let i = len; i--;) {\n                yield arrayLike[i];\n            }\n        });\n    }\n    \n    static range (start = 0, end, step = 1) {\n        if (typeof end === 'undefined') {\n            end = start;\n            start = 0;\n        }\n        \n        start = toInteger(start);\n        end   = toInteger(end);\n        step  = toInteger(step);\n        \n        let errArg = (start !== start && 'start') || (end !== end && 'end') || (step !== step && 'step');\n        if (errArg) {\n            throw TypeError('Expected number as ' + errArg + ' argument'); \n        }\n        if (step == 0) {\n            throw RangeError('step cannot be zero');\n        }\n        \n        return new Iter(function* () {\n            if (step > 0) {\n                while (start < end) {\n                    yield start;\n                    start += step;\n                }\n            }\n            else if (step < 0) {\n                while (start > end) {\n                    yield start;\n                    start += step;\n                }\n            }\n        })\n    }\n    \n    static rangeRight (start = 0, end, step = 1) {\n        if (typeof end === 'undefined') {\n            end = start;\n            start = 0;\n        }\n        \n        let k = Math.abs((start - end) % step || step);\n        if (start > end) {\n            end += k;\n            start++;\n        }\n        else {\n            end -= k;\n            start--; \n        }\n        \n        return Iter.range(end, start, -step);\n    } \n    \n    static zip (iterable, ...iterables) {\n        let iterators = [iterable, ...iterables].map(Iter.getIterator);\n        \n        return new Iter(function* () {\n            try {\n                while (true) {\n                    let res = [];\n                    for (let it of iterators) {\n                        let curr = it.next();\n                        if (curr.done) {\n                            for (let i of iterators) {\n                                if (i !== it) Iter.closeIterator(i);\n                            }\n                            return;\n                        }\n                        res.push(curr.value);\n                    }\n                    yield res;\n                }\n            } finally {\n                iterators.map(Iter.closeIterator);\n            }\n        });\n    }\n    \n    static longZip (iterable, ...iterables) {\n        let iterators = [iterable, ...iterables].map(Iter.getIterator),\n            map       = new Map(Iter.zip(iterators, Iter.repeat(false))),\n            count     = 0;\n        \n        return new Iter(function* () {    \n            try {    \n                while (true) {\n                    let res = [];\n                    for (let it of iterators) {\n                        let curr = it.next();\n                        if (curr.done && !map.get(it)) {\n                            map.set(it, true);\n                            count++;\n                        }\n                        res.push(curr.value);\n                    }\n                    if (count >= iterators.length) {\n                        return;\n                    } \n                    yield res;\n                }\n            } finally {\n                iterators.map(Iter.closeIterator);\n            }\n        });\n    }\n    \n    static count (start, step = 1) {\n        return Iter.range(start, step * Infinity, step);\n    }\n\n    static cycle (iterable) {\n        let iterator = Iter.getIterator(iterable);\n        \n        return new Iter(function* () {\n            let arr = [];\n            for (let v of iterator) {\n                yield v;\n                arr.push(v);\n            }\n            while (true) {\n                yield* arr;\n            }\n        });\n    }\n\n    static repeat (val, times = Infinity) {\n        return new Iter(function* () {\n            for (let i of Iter.range(toPositiveInteger(times))) {\n                yield val;\n            }\n        });\n    }\n    \n    enumerate (start = 0) {\n        return Iter.zip(Iter.count(start), this);\n    }\n    \n    accumulate (callback = (x, y) => x + y) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            try {\n                let next = iterator.next(),\n                    acc = next.value;\n                if (!next.done) {\n                    yield acc;\n                }\n                while (!( next = iterator.next() ).done) {\n                    acc = callback(acc, next.value);\n                    yield acc;\n                }\n            } finally {\n                Iter.closeIterator(iterator);\n            }\n        });\n    }\n    \n    chain (...iterables) {\n        let iterators = [this, ...iterables].map(Iter.getIterator);\n        \n        return new Iter(function* () {\n            for (let it of iterators) {\n                yield* it;\n            }\n        });\n    }\n    \n    compress (selectors) {\n        let iterator = Iter.zip(this, selectors);\n        \n        return new Iter(function* () {\n            for (let [v, s] of iterator) {\n                if (s) yield v;\n            }\n        });\n    }\n    \n    groupBy (key = (x) => x) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            let k = {};\n            let arr = [];\n            \n            for (let v of iterator) {\n                let res = key(v);\n                if (res !== k) {\n                    if (arr.length) {\n                        yield [k, arr];\n                    }\n                    arr = [];\n                    k = res;\n                }\n                arr.push(v);\n            }\n            if (arr.length) {\n                yield [k, arr];\n            }        \n        });\n    }\n    \n    map (callback = (x) => x) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let v of iterator) {\n                yield callback(v);\n            }\n        })\n    }\n    \n    flatMap(callback = (x) => x, deep = true) {\n        let iterator = Iter.getIterator(this);\n        let used  = new Set();\n        \n        return new Iter(function* flatten(iterable = iterator, level = 0) {\n            if (used.has(iterable)) {\n                return;\n            }\n            \n            used.add(iterable); \n            for (let i of iterable) {\n                if (Iter.isIterable(i) && (deep || level < 1)) {\n                    yield* flatten(i, level + 1);\n                }\n                else {\n                    yield callback(i);\n                }\n            }\n            used.delete(iterable);\n        }) \n    }\n    \n    spreadMap (callback) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let arr of iterator) {\n                yield callback(...arr);\n            }\n        });\n    }\n    \n    take (n = Infinity) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            let count = toPositiveInteger(n);\n            for (let v of iterator) {\n                if (count-- > 0) {\n                    yield v;\n                    continue;\n                }\n                break;\n            }\n        });\n    }\n    \n    takeWhile (callback = Boolean) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let v of iterator) {\n                if (callback(v)) {\n                    yield v;\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    \n    drop (n = Infinity) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            let count = toPositiveInteger(n);\n            for (let v of iterator) {\n                if (count-- > 0) {\n                    continue;\n                }\n                yield v;\n            }\n        });\n    }\n    \n    dropWhile (callback = Boolean) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let v of iterator) {\n                if (!callback(v)) {\n                    yield v;\n                    yield* iterator;\n                    break;\n                }\n            }\n        });\n    }\n    \n    filter (callback = Boolean) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let v of iterator) {\n                if (callback(v)) {\n                    yield v;\n                }\n            }\n        });\n    }\n    \n    filterFalse (callback = Boolean) {\n        let iterator = Iter.getIterator(this);\n        \n        return new Iter(function* () {\n            for (let v of iterator) {\n                if (!callback(v)) {\n                    yield v;\n                }\n            }\n        });\n    }\n    \n    product (a = [], ...iterables) {\n        let arr = [this, a, ...iterables].map((it) => Iter.isMultiIterable(it) ? it : [...it]),\n            len = arr.length,\n            res = [];\n        \n        return new Iter(function* gen(idx = 0) {\n            if (idx >= len) {\n                yield res.slice();\n                return;\n            }\n            for (let v of arr[idx]) {\n                res[idx] = v;\n                yield* gen(idx + 1);\n            }\n        });\n    }\n    \n    permutations (r = Infinity) {\n        let arr = this.toArray(),\n            map = new Map(),\n            res = [],\n            len =  Math.min(toPositiveInteger(r), arr.length);\n        \n        return new Iter(function* gen(idx = 0) {\n            if (idx >= len) {\n                yield res.slice();\n                return;\n            }\n            for (let [i, v] of new Iter(arr).enumerate()) {\n                if (!map.has(i)) {\n                    map.set(i, true);\n                    res[idx] = v;\n                    yield* gen(idx + 1);\n                    map.delete(i);\n                }\n            }\n        });\n    }\n    \n    combinations (r) {\n        let arr = this.toArray(),\n            len = toPositiveInteger(r),\n            res = [];\n\n        return new Iter(function* gen(idx = 0, start = 0) {\n            if (idx >= len) {\n                yield res.slice();\n                return;\n            }\n            for (let i = start, l = arr.length; i < l; i++) {\n                res[idx] = arr[i];\n                yield* gen(idx + 1, i + 1);\n            }\n        });\n    }\n    \n    toIterator () {\n        return Iter.getIterator(this);\n    } \n    \n    toArray () {\n        return [...Iter.getIterator(this)];        \n    }\n}\n\n"]}