'use strict'; // istanbul ignore next
function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}require('./auto_mock_off');require('babel/polyfill');var _srcItertools = require(
'../src/itertools');

describe('isClosable', function () {
    it('returns true if Iterator implements return method', function () {// istanbul ignore next
        var _iter;var iter = (_iter = {}, _defineProperty(_iter, 
        Symbol.iterator, function () {
            return this;}), _defineProperty(_iter, 'next', 

        function next() {}), _defineProperty(_iter, 'return', 
        function _return() {}), _iter);

        expect((0, _srcItertools.isClosable)(iter)).toBe(true);});


    it('returns false with non iterators', function () {
        var nonIter = { 
            next: function next() {}, 
            'return': function _return() {} };

        expect((0, _srcItertools.isClosable)(nonIter)).toBe(false);
        expect((0, _srcItertools.isClosable)([])).toBe(false);
        expect((0, _srcItertools.isClosable)(545)).toBe(false);});


    it('returns false without arguments or null', function () {
        expect((0, _srcItertools.isClosable)()).toBe(false);
        expect((0, _srcItertools.isClosable)(null)).toBe(false);});});